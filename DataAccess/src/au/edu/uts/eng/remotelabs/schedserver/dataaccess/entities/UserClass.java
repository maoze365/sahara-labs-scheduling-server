package au.edu.uts.eng.remotelabs.schedserver.dataaccess.entities;

// Generated 06/01/2010 5:09:20 PM by Hibernate Tools 3.2.5.Beta

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * UserClass generated by hbm2java
 */
@Entity
@Table(name = "user_class", catalog = "sahara", uniqueConstraints = @UniqueConstraint(columnNames = "name"))
public class UserClass implements java.io.Serializable
{

    /**
     * 
     */
    private static final long serialVersionUID = -6085739202856516308L;
    private Long id;
    private String name;
    private boolean priority;
    private boolean queuable;
    private boolean kickable;
    private boolean usersLockable;
    private boolean active;
    private Set<UserAssociation> userAssociations = new HashSet<UserAssociation>(
            0);
    private Set<AcademicPermission> academicPermissions = new HashSet<AcademicPermission>(
            0);
    private Set<UserAssociation> userAssociations_1 = new HashSet<UserAssociation>(
            0);
    private Set<AcademicPermission> academicPermissions_1 = new HashSet<AcademicPermission>(
            0);
    private Set<ResourcePermission> resourcePermissions = new HashSet<ResourcePermission>(
            0);
    private Set<ResourcePermission> resourcePermissions_1 = new HashSet<ResourcePermission>(
            0);

    public UserClass()
    {
    }

    public UserClass(final String name, final boolean priority,
            final boolean queuable, final boolean kickable,
            final boolean usersLockable, final boolean active)
    {
        this.name = name;
        this.priority = priority;
        this.queuable = queuable;
        this.kickable = kickable;
        this.usersLockable = usersLockable;
        this.active = active;
    }

    public UserClass(final String name, final boolean priority,
            final boolean queuable, final boolean kickable,
            final boolean usersLockable, final boolean active,
            final Set<UserAssociation> userAssociations,
            final Set<AcademicPermission> academicPermissions,
            final Set<UserAssociation> userAssociations_1,
            final Set<AcademicPermission> academicPermissions_1,
            final Set<ResourcePermission> resourcePermissions,
            final Set<ResourcePermission> resourcePermissions_1)
    {
        this.name = name;
        this.priority = priority;
        this.queuable = queuable;
        this.kickable = kickable;
        this.usersLockable = usersLockable;
        this.active = active;
        this.userAssociations = userAssociations;
        this.academicPermissions = academicPermissions;
        this.userAssociations_1 = userAssociations_1;
        this.academicPermissions_1 = academicPermissions_1;
        this.resourcePermissions = resourcePermissions;
        this.resourcePermissions_1 = resourcePermissions_1;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public Long getId()
    {
        return this.id;
    }

    public void setId(final Long id)
    {
        this.id = id;
    }

    @Column(name = "name", unique = true, nullable = false, length = 50)
    public String getName()
    {
        return this.name;
    }

    public void setName(final String name)
    {
        this.name = name;
    }

    @Column(name = "priority", nullable = false)
    public boolean isPriority()
    {
        return this.priority;
    }

    public void setPriority(final boolean priority)
    {
        this.priority = priority;
    }

    @Column(name = "queuable", nullable = false)
    public boolean isQueuable()
    {
        return this.queuable;
    }

    public void setQueuable(final boolean queuable)
    {
        this.queuable = queuable;
    }

    @Column(name = "kickable", nullable = false)
    public boolean isKickable()
    {
        return this.kickable;
    }

    public void setKickable(final boolean kickable)
    {
        this.kickable = kickable;
    }

    @Column(name = "users_lockable", nullable = false)
    public boolean isUsersLockable()
    {
        return this.usersLockable;
    }

    public void setUsersLockable(final boolean usersLockable)
    {
        this.usersLockable = usersLockable;
    }

    @Column(name = "active", nullable = false)
    public boolean isActive()
    {
        return this.active;
    }

    public void setActive(final boolean active)
    {
        this.active = active;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userClass")
    public Set<UserAssociation> getUserAssociations()
    {
        return this.userAssociations;
    }

    public void setUserAssociations(final Set<UserAssociation> userAssociations)
    {
        this.userAssociations = userAssociations;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userClass")
    public Set<AcademicPermission> getAcademicPermissions()
    {
        return this.academicPermissions;
    }

    public void setAcademicPermissions(
            final Set<AcademicPermission> academicPermissions)
    {
        this.academicPermissions = academicPermissions;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userClass")
    public Set<UserAssociation> getUserAssociations_1()
    {
        return this.userAssociations_1;
    }

    public void setUserAssociations_1(
            final Set<UserAssociation> userAssociations_1)
    {
        this.userAssociations_1 = userAssociations_1;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userClass")
    public Set<AcademicPermission> getAcademicPermissions_1()
    {
        return this.academicPermissions_1;
    }

    public void setAcademicPermissions_1(
            final Set<AcademicPermission> academicPermissions_1)
    {
        this.academicPermissions_1 = academicPermissions_1;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userClass")
    public Set<ResourcePermission> getResourcePermissions()
    {
        return this.resourcePermissions;
    }

    public void setResourcePermissions(
            final Set<ResourcePermission> resourcePermissions)
    {
        this.resourcePermissions = resourcePermissions;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userClass")
    public Set<ResourcePermission> getResourcePermissions_1()
    {
        return this.resourcePermissions_1;
    }

    public void setResourcePermissions_1(
            final Set<ResourcePermission> resourcePermissions_1)
    {
        this.resourcePermissions_1 = resourcePermissions_1;
    }

}
