#!/bin/bash
#
# Starts the Sahara Scheduling Server.
#
# description: schedulingserver
# processname: schedulingserver
#
# author: tmachet (tania.machet@eng.uts.edu.au)
# date: 12/03/2010
#
# chkconfig: 345 95 5
# description: Scheduling Server service for Sahara 


INST_DIR=/usr/lib/schedulingserver
test -d $INST_DIR || exit 0

# Executables
EXEC=schedulingservice

RETVAL=0

function exportLibJvmLocation
{
    JAVAPATH=`which java`
    if [ $? -eq 0 ] ; then
	
	# Check the version of java is atleast Java 6
	if [[ `java -version 2>&1 | head -n 1 | awk -F'"' '{ printf $2 }' | cut -d '.' -f2` -lt 6 ]]; then
	    echo "Java version isn't Java 6 or above, so unable to use it."
	    return;
	fi
	
	# Resolve symbloic links to the actual file. This is likely going to be:
	#     1) /usr/bin/java               -> /etc/alternatives/java
        #     2) /etc/alternatives/java -> <actual java executable>
	JAVAPATH=`readlink -f $JAVAPATH`

	# Finding the java executable path, now find the base of the
	# installation directory which is one up from the java 
	# executable directory ('bin/')
	JAVAPATH=`dirname $JAVAPATH`/../
	JAVAPATH=`readlink -f $JAVAPATH`
	
	# If the 'jre' directory exists (i.e. this is a JDK installation),
	# descend to the jre directory.
	if [ -d $JAVAPATH/jre ]; then
	    JAVAPATH=$JAVAPATH/jre
	fi
	
	JAVAPATH=$JAVAPATH/lib
	
	# Now find the arch directory in the 'lib' directory.
	# Known options are (if you know of any other please email
	# mdiponio@eng.uts.edu.au):
	#     1) i386     : x86 32 bit UNIX
	#     2) amd64 : x86 64 bit UNIX
	#     3) sparc   : sparc arch on Solaris 
	#     4) arm      : arm (atleast on my N900)
	ARCHS="i386 amd64 sparc amd"
	for ARCH in $ARCHS ; do
	    if [ -d $JAVAPATH/$ARCH ] ; then
		JAVAPATH=$JAVAPATH/$ARCH
		break;
	    fi
	done
	
	# Different JVMs are provided in the arch directory.
	JVMS="server client" 
	for JVM in $JVMS; do
	    if [ -d $JAVAPATH/$JVM ] ; then
		JAVAPATH=$JAVAPATH/$JVM
		break;
	    fi
	done
    fi
    
    # If 'libjvm.so' is present, export the location.
    JVMSO=$JAVAPATH/libjvm.so
    if [ -f $JVMSO ]; then	
	export JVM_SO=$JVMSO
    fi
}

start() {
	# Check whether user is root in order to stop or start tasks
	if [[ `id -u` != 0 ]] ; then
		echo "Only root may start the Scheduling Server."
		return
	fi 	
	exportLibJvmLocation
    PID=`ps -C $EXEC | grep schedulingserv | awk -F' ' '{ printf $1 }' `
    if [[ ! "$PID" > 0 ]]; then
		echo "Starting the Scheduling Server..."
		pushd . &> /dev/null 
		cd $INST_DIR
		$INST_DIR/$EXEC &> /dev/null &
		popd &> /dev/null 
	else
		echo "Scheduling Server has already started. Process ID "$PID"."
    fi
}

stop() {
	# Check whether user is root in order to stop or start tasks
	if [[ `id -u` != 0 ]] ; then
		echo "Only root may stop the Scheduling Server."
		return
	fi 
	
	PID=`ps -C $EXEC | grep schedulingserv | awk -F' ' '{ printf $1 }' `
    	if [[ "$PID" > 0 ]]; then
	    	echo "Shutting down Scheduling Server with PID "$PID"..."
    PID=`ps -C $EXEC | grep schedulingserv | awk -F' ' '{ printf $1 }' `
    if [[ "$PID" > 0 ]]; then
    	echo "Shutting down Scheduling Server with PID "$PID"..."
		kill -SIGTERM $PID &> /dev/null
		
		ps -C $EXEC &> /dev/null
		while [[ $? -eq 0 ]]; do
			sleep 1
			ps -C $EXEC &> /dev/null
		done
		echo "Scheduling Server has shutdown."
	else
		echo "No Scheduling Server found to shut down."
	fi
}

status() {
    PID=`ps -C $EXEC | grep schedulingserv | awk -F' ' '{ printf $1 }' `
    if [[ "$PID" > 0 ]]; then
		echo "The Scheduling Server is running.  PID is "$PID"."
	else
		echo "The Scheduling Server is not running."
	fi
}


case "$1" in
start)
	start
	;;
stop)
	stop
	;;
status)
	status
	;;
*)
	echo $"Usage: $0 {start|stop|status}"
	exit 1
esac

exit $?


