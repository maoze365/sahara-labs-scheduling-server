#Sahara Scheduling Server Configuration File

################################################################################
## Database configuration                                                     ##
################################################################################

# Database connection URL - The connection URL specifies the host name and 
# port number needed to connect to the database. The format of the connection
# URL is specific to the database server in use. The following is the 
# formats of both MySQL and PostgreSQL:
#     * MySQL - jdbc:mysql://<host>:<port>/<database name>
#     * PostgreSQL - jdbc:postgresql://<host>:<port>/<database name>
#
# DB_Connection_URL <String>
# DB_Connection_URL jdbc:mysql://127.0.0.1:3306/sahara (locally & default port)
DB_Connection_URL jdbc:mysql://127.0.0.1:3306/sahara

# Database user name - User name of user with privilege to use the database
# that is being connected to.
# DB_Username <String>
# DB_Username sahara
DB_Username sahara

# Database password - Password corresponding to the configured database user
# user name.
# DB_Password <String>
# DB_Password saharapasswd
DB_Password saharapasswd

# Database driver class - The JDBC driver class to connect to the database.
# This is specific to the database server in use and requires the driver 
# library to be in use (the MySQL v4.1+ and PostgreSQL v7.2+ driver libraries 
# are distributed with the Scheduling Server). The MySQL and PostgreSQL
# drivers are:
#      * MySQL - com.mysql.jdbc.Driver
#      * PostgreSQL - org.postgresql.Driver
#
# DB_Database_Driver <Qualified class name>
# DB_Database_Driver com.mysql.jdbc.Driver
DB_Database_Driver com.mysql.jdbc.Driver

# Database dialect - Dialect class which allows the generation of optimized 
# SQL for a particular relational database. The dialects for MySQL and 
# PostgreSQL are (for other databases consult the Hibernate documentation):
#     * MySQL - org.hibernate.dialect.MySQLInnoDBDialect
#     * PostgreSQL - org.hibernate.dialect.PostgreSQLDialect
#
# DB_Database_Dialect <Qualified class name>
# DB_Database_Dialect org.hibernate.dialect.MySQLInnoDBDialect
DB_Database_Dialect org.hibernate.dialect.MySQLInnoDBDialect

# Database connection pool minimum size - The minimum number of database
# connections that are always pooled.
# DB_Conn_Pool_Min_Size <int>
# DB_Conn_Pool_Min_Size 3
DB_Conn_Pool_Min_Size 3

# Database connection pool maximum size -The maximum number of database
# connections that are pooled. This should not exceed the database
# server configured maximum number of connections.
# DB_Conn_Pool_Max_Size 50
DB_Conn_Pool_Max_Size 50

# Database connection timeout - The length of time in seconds a connection
# may be pooled before being cleaned up.
# DB_Conn_Timeout <int>
# DB_Conn_Timeout 600
DB_Conn_Timeout 600


################################################################################
## Logging configuration                                                      ##
################################################################################

# Logger type - either:
#      * SystemErr - logging messages printed to standard error stream
#      * File - logging messages printed to file (not rolled)
#      * RolledFile - logging messages printed to a rolled log file
#      * Syslog - logging messages sent to Syslog server (TODO)
#      * WinEvents - logging messages sent to the Windows Event Log
#            
# NOTE: The WinEvents logger only runs on Windows and requires the 
# NTEventLogAppender.dll to placed in a directory in PATH (e.g.
# C:\Windows\System32).

# Logger_Type [SystemErr | File | RolledFile | Syslog | WinEvents]
# Logger_Type SystemErr
Logger_Type SystemErr

# Logging level - either (in order of verbosity)
#      * ERROR - Messages that are generated by events that cause unexpected \ 
#                results and stop the expected program execution sequence.
#      * WARN - Messages that are generated by events that cause undesired \ 
#               results but do not stop the expected program execution sequence.
#      * INFO - Messages that are generated by events that are regular in \
#               occurrence, however are useful for audit trails.
#      * DEBUG - Messages specifying program execution and progression.
#
# Note: FATAL and PRIORITY are always logged.
# Log_Level [ERROR | WARN | INFO | DEBUG]
# Log_Level DEBUG
Log_Level DEBUG

# Log file name that are logged messages are appended to (for File and RolledFile)
# Log_File_Name <String>
# Log_File_Name /home/mdiponio/rigclient.log
Log_File_Name /home/mdiponio/rigclient.log

# Maximum file size for the rolled file logger log file in megabytes. For use
# with the RolledFile logger.
# Log_File_Max_Size <int>
# Log_File_Max_Size 10
Log_File_Max_Size 10

# Maximum number of backups for the rolled file logger log file backups. After 
# the maximum number of backups is exceeded, the oldest log backup file is 
# deleted. For use with the RolledFile logger.
# Log_File_Backups <int>
# Log_File_Backups 5
Log_File_Backups 5

# Syslog host - The host name or IP of the Syslog server. For use with the 
# Syslog logger.
# Syslog_Host <host>
# Syslog_Host 127.0.0.1
Syslog_Host 127.0.0.1

# Syslog log local facility number to use (between 1 to 7). For use with the
# Syslog logger.
# Syslog_Local_Facility_Num <int between 1 and 7 inclusive)
# Syslog_Local_Facility_Num 1
Syslog_Local_Facility_Num 1

# The format of the log messages can be specifying by providing a format
# string with macros which are be replaced by their actual values.
# The following is a list of macros that may be put in format strings.
#      * __MESSAGE__  - Actual message
#      * __LEVEL__    - Logging level (FATAL, PRIORITY, ..., DEBUG)
#      * __TIME__     - Time with hour of day:minute:second
#      * __DATE__     - Date with day:month:year
#      * __ISO8601__  - ISO 8601 formatted date
#      * __CLASS__    - Class where the message originated
#      * __METHOD__   - Method where the message originated
#      * __SOURCE__   - Source file where the message originated
#      * __LINE_NUM__ - Line number where the message originated
#      * __TID__      - Thread id where the message orignated

# Default log format - the default format of logging messages for those 
# levels which do not provide their own logging format 
# Default_Log_Format <format string>
# Default_Log_Format [__LEVEL__] - [__ISO8601__] - __MESSAGE__
Default_Log_Format [__LEVEL__] - [__ISO8601__] - __MESSAGE__

# Fatal log format specific to fatal log messages
# FATAL_Log_Format <format string>
# FATAL_Log_Format [FATAL] - [__ISO8601__] - __MESSAGE__
FATAL_Log_Format [FATAL] - [__ISO8601__] - __MESSAGE__

# Priority log format specific to priority log messages
# PRIORITY_Log_Format <format string>
# PRIORITY_Log_Format [FATAL] - [__ISO8601__] - __MESSAGE__
PRIORITY_Log_Format [PRIORITY] - [__ISO8601__] - __MESSAGE__

# Error log format specific to error log messages
# ERROR_Log_Format <format string>
# ERROR_Log_Format [ERROR] - [__ISO8601__] - __MESSAGE__
ERROR_Log_Format [ERROR] - [__ISO8601__] - __MESSAGE__

# Warn log format specific to warning log messages
# WARN_Log_Format <format string>
# WARN_Log_Format [WARN] - [__ISO8601__] - __MESSAGE__
WARN_Log_Format [WARN] - [__ISO8601__] - __MESSAGE__

# Info log format specific to informational log messages
# INFO_Log_Format <format string>
# INFO_Log_Format [INFO] - [__ISO8601__] - __MESSAGE__
INFO_Log_Format [INFO] - [__ISO8601__] - __MESSAGE__

# Debug log format specific to debugging log messages
# DEBUG_Log_Format <format string>
# DEBUG_Log_Format [DEBUG] - [__ISO8601__] - __MESSAGE__ (__SOURCE__:__LINE_NUM__)
DEBUG_Log_Format [DEBUG] - [__ISO8601__] - __MESSAGE__ (__SOURCE__:__LINE_NUM__)
